# Ответы на вопросы по JavaScript

## 1. Что такое приватные свойства? Как их записывают?

Приватные свойства — это свойства класса, которые доступны только внутри класса и не могут быть доступны или изменены извне. В JavaScript приватные свойства обозначаются с помощью символа `#` перед именем свойства.

Пример:
```javascript
class Person {
  #name; // Приватное свойство

  constructor(name) {
    this.#name = name;
  }

  getName() {
    return this.#name;
  }
}

const person = new Person("Алексей");
console.log(person.getName()); // Вывод: Алексей
console.log(person.#name); // Ошибка: SyntaxError
```

## 2. Что такое приватные методы? Как их записывают?

Приватные методы — это методы класса, которые доступны только внутри класса и не могут быть вызваны извне. Они также обозначаются с помощью символа `#` перед именем метода.

Пример:
```javascript
class Person {
  #sayHello() { // Приватный метод
    return "Привет!";
  }

  publicMethod() {
    return this.#sayHello();
  }
}

const person = new Person();
console.log(person.publicMethod()); // Вывод: Привет!
console.log(person.#sayHello()); // Ошибка: SyntaxError
```

## 3. Что такое геттеры свойств? Как создать геттер?

Геттеры — это специальные методы, которые используются для получения значения свойства. Они определяются с помощью ключевого слова `get` и позволяют обращаться к свойству как к обычному полю, а не как к функции.

Пример:
```javascript
class Person {
  #name;

  constructor(name) {
    this.#name = name;
  }

  get name() {
    return this.#name;
  }
}

const person = new Person("Алексей");
console.log(person.name); // Вывод: Алексей (вызывается геттер)
```

## 4. Что такое сеттер? Как создать сеттер?

Сеттеры — это специальные методы, которые используются для установки значения свойства. Они определяются с помощью ключевого слова `set` и позволяют контролировать процесс присваивания значения свойству.

Пример:
```javascript
class Person {
  #name;

  constructor(name) {
    this.#name = name;
  }

  set name(newName) {
    this.#name = newName;
  }

  get name() {
    return this.#name;
  }
}

const person = new Person("Алексей");
person.name = "Мария"; // Вызывается сеттер
console.log(person.name); // Вывод: Мария
```

## 5. В чем преимущества геттеров и сеттеров?

Преимущества геттеров и сеттеров:
- **Инкапсуляция**: Позволяют скрывать внутреннюю реализацию класса, предоставляя контролируемый доступ к свойствам.
- **Валидация данных**: Сеттеры позволяют проверять и обрабатывать данные перед их сохранением.
- **Гибкость**: Можно добавлять дополнительную логику при получении или установке значения свойства (например, логирование или преобразование данных).
- **Упрощённый синтаксис**: Позволяют обращаться к методам как к обычным свойствам (без вызова функции с круглыми скобками).
- **Совместимость**: Обеспечивают обратную совместимость, если в будущем потребуется изменить внутреннюю логику доступа к данным.

Пример с валидацией:
```javascript
class Person {
  #age;

  constructor(age) {
    this.#age = age;
  }

  set age(newAge) {
    if (newAge < 0) {
      throw new Error("Возраст не может быть отрицательным");
    }
    this.#age = newAge;
  }

  get age() {
    return this.#age;
  }
}

const person = new Person(30);
person.age = 25; // Успешно
console.log(person.age); // Вывод: 25
person.age = -5; // Ошибка: Возраст не может быть отрицательным
```